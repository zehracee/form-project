let evaluationData = {};
let username = ""; // Kullanıcı adı dinamik olarak alınacak

// Kullanıcı adını formdan almak
document.getElementById("username").addEventListener("input", (e) => {
    username = e.target.value.trim();
});

// Sayfa yükleme fonksiyonu (tüm verileri yükler)
function loadAll() {
    const container = document.getElementById("abstract-container");
    container.innerHTML = ""; // Mevcut içeriği temizle

    abstracts.forEach((item, index) => {
        const abstractDiv = document.createElement("div");
        abstractDiv.classList.add("abstract-section");
        abstractDiv.innerHTML = `
            <p class="abstract"><b>Abstract ${index + 1}:</b> ${item.abstract}</p>
            ${item.models.map((model, idx) => `
                <div class="form-section">
                    <h2><span class="model">Model ${idx + 1} Tahmini: </span> ${model}</h2>
                    <div class="criteria-grid">
                        ${['Netlik (Modelin verdiği cevabın ne kadar anlaşılır olduğunu ölçer)', 'Akıcılık (Modelin verdiği cevabın dilbilgisi kurallarına uygunluğunu ölçer)', 'Bağlamsal İlgi (Modelin uygun cevap üretip üretmediğini ölçer)', 'Tutarlılık (Modelin cevabı mantıksal tutarlı mı?)'].map((criterion, criterionIdx) => {
                            const fieldName = `model${index + 1}-${idx + 1}-criterion${criterionIdx + 1}`;
                            const savedValue = evaluationData[fieldName] || ""; 
                            return `
                                <div>
                                    <label for="${fieldName}">${criterion}</label>
                                    <select id="${fieldName}" name="${fieldName}" required>
                                        <option value="" disabled ${!savedValue ? "selected" : ""}>Seçiniz</option>
                                        ${[1, 2, 3, 4, 5].map(option => `
                                            <option value="${option}" ${savedValue == option ? "selected" : ""}>${option}</option>
                                        `).join("")}
                                    </select>
                                </div>
                            `;
                        }).join("")}
                    </div>
                </div>
            `).join("")}
        `;

        // Değişiklikleri kaydet
        abstractDiv.querySelectorAll("select").forEach(select => {
            select.addEventListener("change", (e) => {
                evaluationData[e.target.name] = e.target.value;
            });
        });

        container.appendChild(abstractDiv);
    });

    // Gönder butonunu aktif yap
    document.getElementById("submit").disabled = false;
}

// Verileri gönderme
document.getElementById("submit").addEventListener("click", () => {
    // Kullanıcı adı kontrolü
    if (!username.trim()) {
        alert("Lütfen kullanıcı adınızı girin.");
        return;
    }

    // Değerlendirme verilerini formatla
    const formattedData = Object.entries(evaluationData).map(([key, value]) => {
        const [abstractNum, modelNum, criterionIdx] = key.match(/\d+/g);
        const criterionLabels = ['Netlik', 'Akıcılık', 'Bağlamsal İlgi', 'Tutarlılık'];
        return {
            username: username,
            abstract: parseInt(abstractNum),
            model: parseInt(modelNum),
            criterion: criterionLabels[criterionIdx - 1],
            score: parseInt(value)
        };
    });

    // Fetch ile verileri gönder
    fetch("https://script.google.com/macros/s/AKfycbwCASQxi9kp-QJLxA9gKF1B57DMuKtUkp_GFvM5UaR7mubUGs-sc_iv_YwtOzFeOgocxA/exec", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formattedData),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Değerlendirme Google Sheets'e kaydedildi!");
        } else {
            alert("Sunucudan hata döndü: " + data.message);
        }
    })
    .catch(error => {
        console.error("Hata:", error);
        alert("Bir hata oluştu, lütfen tekrar deneyin.");
    });
});

// Sayfa başlat (Tüm içerikleri yükle)
loadAll();
